{"version":3,"file":"dropbox.js","sourceRoot":"","sources":["../../lib/dropbox.ts"],"names":[],"mappings":";;AAAA,uCAAoF;AAQpF,MAAa,OAAQ,SAAQ,iBAAO;IAClC;;;;;;OAMG;IACH,KAAK,CAAC,YAAY,CAAC,WAAmB,EAAE,UAAkB;QACxD,MAAM,OAAO,GAAmB;YAC9B,MAAM,EAAE,uBAAa,CAAC,IAAI;YAC1B,GAAG,EAAE,qDAAqD;YAC1D,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,WAAW,EAAE;gBACtC,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,UAAU;gBAChB,UAAU,EAAE,KAAK;aAClB;YACD,IAAI,EAAE,IAAI;SACX,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,OAAO,CAAC,WAAmB,EAAE,MAAe,EAAE,SAAmB;QACrE,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,GAAG,EAAE,CAAC;SACb;QAED,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,SAAS,GAAG,KAAK,CAAC;SACnB;QACD,MAAM,OAAO,GAAmB;YAC9B,MAAM,EAAE,uBAAa,CAAC,IAAI;YAC1B,GAAG,EAAE,gDAAgD;YACrD,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,WAAW,EAAE;gBACtC,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,SAAS;aACV;YACD,IAAI,EAAE,IAAI;SACX,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,WAAW,CAAC,WAAmB,EAAE,MAAe;QACpD,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,GAAG,EAAE,CAAC;SACb;QAED,MAAM,OAAO,GAAmB;YAC9B,MAAM,EAAE,uBAAa,CAAC,IAAI;YAC1B,GAAG,EAAE,gDAAgD;YACrD,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,WAAW,EAAE;gBACtC,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;aACb;YACD,IAAI,EAAE,IAAI;SACX,CAAC;QAEF,MAAM,GAAG,GAAoB,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,MAAM,OAAO,GAAmB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAmB,CAAC;QAEtG,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,OAAO;YACL,IAAI;YACJ,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACvB,CAAC;IACJ,CAAC;CAeF;AA7GD,0BA6GC","sourcesContent":["import { RequestMethod, RequestOptions, Request, RequestResponse } from './request';\n\nexport interface DropboxEntry {\n  type: string;\n  name: string;\n  id: string;\n}\n\nexport class Dropbox extends Request {\n  /**\n   * @method createFolder\n   * @param accessToken\n   * @param folderPath\n   *\n   * https://www.dropbox.com/developers/documentation/http/documentation#files-create_folder\n   */\n  async createFolder(accessToken: string, folderPath: string): Promise<RequestResponse> {\n    const options: RequestOptions = {\n      method: RequestMethod.POST,\n      url: 'https://api.dropboxapi.com/2/files/create_folder_v2',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: {\n        path: folderPath,\n        autorename: false\n      },\n      json: true\n    };\n    return this.post(options);\n  }\n\n  /**\n   * @method listAll\n   * @param accessToken\n   * @param parent\n   *\n   * https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder\n   */\n  async listAll(accessToken: string, parent?: string, recursive?: boolean): Promise<RequestResponse> {\n    if (parent === undefined) {\n      parent = '';\n    }\n\n    if (recursive === undefined) {\n      recursive = false;\n    }\n    const options: RequestOptions = {\n      method: RequestMethod.POST,\n      url: 'https://api.dropboxapi.com/2/files/list_folder',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: {\n        path: parent,\n        recursive\n      },\n      json: true\n    };\n\n    return this.post(options);\n  }\n\n  /**\n   * @method listFolders\n   * @param accessToken\n   * @param parent\n   *\n   * https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder\n   */\n  async listFolders(accessToken: string, parent?: string): Promise<RequestResponse> {\n    if (parent === undefined) {\n      parent = '';\n    }\n\n    const options: RequestOptions = {\n      method: RequestMethod.POST,\n      url: 'https://api.dropboxapi.com/2/files/list_folder',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: {\n        path: parent\n      },\n      json: true\n    };\n\n    const res: RequestResponse = await this.post(options);\n\n    const body = JSON.parse(JSON.stringify(res.body));\n    const entries = body.entries;\n    const folders: DropboxEntry[] = entries.filter(entry => entry['.tag'] === 'folder') as DropboxEntry[];\n\n    body.entries = folders;\n\n    return {\n      body,\n      response: res.response\n    };\n  }\n\n  // async deleteAllFolders(accessToken: string, parent?: string) {\n  //\n  //   const res: RequestResponse = await this.listFolders(accessToken, parent);\n  //\n  //   const body = JSON.parse(JSON.stringify(res.body));\n  //   const folders = body.entries;\n  //\n  //   for (const folder of folders) {\n  //     awit\n  //   }\n  //\n  //   return res;\n  // };\n}\n"]}